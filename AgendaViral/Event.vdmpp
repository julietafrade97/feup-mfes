class Event

	types
	
		public String = seq of char;
		
		-- Represents a date
		public Date :: day : nat1
									month: nat1
									year : nat1
									
		-- Ensures a valid date													
		inv date == if date.year mod 400 = 0 or (date.year mod 100 <> 0 and date.year mod 4 <> 0)
								then date.month <= 12 and date.day <= [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31](date.month)
								else date.month <= 12 and date.day <= [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31](date.month);
		
		-- Represents the event's state							
		public State = <Available> | <SoldOut>;
		
	instance variables
	
		public static eventId : nat := 1;
		
		-- Event's id
		public id : nat;
	
		-- Event's title
		protected title: String;
		
		-- Event's category
		protected category: String;
		
		-- Event's state
		protected state: State;
		
		-- Event's starting date
		protected dateStart: Date;
		
		-- Event's ending date
		protected dateEnd: Date;
		
		-- Event's description
		protected description: String;
		
		-- Event's price
		protected price: real;
		
		-- Event's city
		protected city: String;
		
		-- Event's total amount of tickets
		protected totalTickets: nat1;
		
		-- Event's amount of sold tickets
		protected soldTickets: nat;
		
	operations
	
		-- Constructor
		public Event: String * String * Date * Date * String * real * String * nat1 ==> Event
		Event(newTitle, newCategory, newStart, newEnd, newDescription, newPrice, newCity, newTotal) == (
			id := eventId;
			eventId := eventId + 1;
			
			title := newTitle;
			category := newCategory;
			state := <Available>;
			dateStart := newStart;
			dateEnd := newEnd;
			description := newDescription;
			price := newPrice;
			city := newCity;
			totalTickets := newTotal;
			soldTickets := 0;
			
			return self;
		)
		pre len newTitle > 0
		post title = newTitle; -- TODO: verificar datas
		
		-- Returns event's title
		public pure getTitle: () ==> String
		getTitle () == return title;
		
		-- Returns event's id
		public pure getID: () ==> nat
		getID () == return id;
		
		-- Returns event's category
		public pure getCategory: () ==> String
		getCategory () == return category;
		
		-- Returns event's state
		public pure getState: () ==> State
		getState () == return state;
		
		-- Returns event's starting date
		public pure getDateStart: () ==> Date
		getDateStart () == return dateStart;
		
		-- Returns event's ending date
		public pure getDateEnd: () ==> Date
		getDateEnd () == return dateEnd;
		
		-- Returns event's description
		public pure getDescription: () ==> String
		getDescription () == return description;
		
		-- Returns event's price
		public pure getPrice: () ==> real
		getPrice () == return price;
		
		-- Returns event's city
		public pure getCity: () ==> String
		getCity () == return city;
		
		-- Returns event's total tickets
		public pure getTotalTickets: () ==> nat1
		getTotalTickets () == return totalTickets;
		
		-- Returns event's sold tickets
		public pure getSoldTickets: () ==> nat
		getSoldTickets () == return soldTickets;
		
		-- Returns event's percentage of tickets sold
		public pure getStats: () ==> real
		getStats () == return soldTickets * 100 / totalTickets;
		
		-- Updates event's sold tickets
		public setSoldTickets: nat ==> ()
		setSoldTickets (nr) == soldTickets := nr;
		
		-- Updates event's sold tickets
		public buy: nat ==> ()
		buy (nTickets) == 
			soldTickets := soldTickets + nTickets
		pre totalTickets >= soldTickets + nTickets
		post soldTickets = soldTickets~ + nTickets;

end Event