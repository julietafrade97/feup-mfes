class Agenda
	types
		public String = seq of char;
		public MultiMap = map String to set of String
	
	values
	
	instance variables
	
		-- Agenda's list of categories
		public categories: set of String := {};
		
		-- Agenda's list of locations (multimap district->cities)
		public locations: MultiMap := {|->};
		
		-- Agenda's map of users
		public users: map seq of char to User := {|->};
		
		-- Agenda's list of events
		public events: set of Event := {};
		
	operations
		
		-- Constructor
		public Agenda: () ==> Agenda 
		Agenda() == (
			categories :=  {"Concertos", "Exposicoes", "Literatura", "Moda", "Desporto", "Natureza"};
			locations := {"Porto" |-> {"Porto", "Matosinhos", "Maia", "Vila Nova de Gaia"},
										"Lisboa" |-> {"Lisboa", "Amadora", "Cascais", "Sintra"},
										"Coimbra" |-> {"Coimbra", "Cantanhede", "Figueira da Foz", "Lousa"}};	
													
			return self;
		);
		
		-- Add user
		public addUser: User ==> ()
		addUser(u) == users := users ++ {u.getEmail() |-> u};
		
		-- Add event
		public addEvent: Event ==> ()
		addEvent(e) == events := events union {e};
		
		-- *FIND EVENTS*
		
		-- by city
		public findByCity: String ==> set of Event
		findByCity(city) == (
			dcl cityEvents : set of Event := {};
			for all event in set events do (
					if event.getCity() = city
					then cityEvents := cityEvents union {event}
			);
			return cityEvents;
		)
		pre existsCity(city) and events <> {};
	
		-- by district
		public findByDistrict: String ==> set of Event
		findByDistrict(district) == (
			dcl districtEvents : set of Event := {};
			for all event in set events do (
					if existsCityInDistrict(event.getCity(), district)
					then districtEvents := districtEvents union {event}
			);
			return districtEvents;
		)
		pre existsDistrict(district) and events <> {};
		
		-- by category
		
		-- by date
		
		-- *AUX*
		public pure existsCity: String ==> bool
		existsCity(city) == (
			dcl citiesSet : set of set of String := rng locations;
			dcl cities: set of String := {};
			for all cs in set citiesSet do(
				cities := cities union cs
			);
			return city in set cities;
		)
		pre locations <> {|->};
		
		public pure existsDistrict: String ==> bool
		existsDistrict(district) == (
			dcl districts : set of String := dom locations;
			return district in set districts;
		)
		pre locations <> {|->};
		
		public pure existsCityInDistrict: String * String ==> bool
		existsCityInDistrict(city, district) == (
			dcl districtCities : set of String := locations(district);
			return city in set districtCities;
		)
		pre locations <> {|->};
		
	functions
	
	traces

end Agenda